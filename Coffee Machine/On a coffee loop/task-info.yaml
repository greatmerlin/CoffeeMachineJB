type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {

        public static void main(String[] args) {

            Data data = new Data();
            Scanner scanner = new Scanner(System.in);

            System.out.println("The coffee machine has:");
            System.out.println(data.getWater() + " of water");
            System.out.println(data.getMilk() + " of milk");
            System.out.println(data.getBeans() + " of coffee beans");
            System.out.println(data.getCups() + " of disposable cups");
            System.out.println(data.getMoney() + " of money");

            System.out.println();
            System.out.println("Write action (buy, fill, take): ");
            String action = scanner.nextLine();

            switch (action) {
                case "buy":
                    System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ");
                    int whatToBuy = scanner.nextInt();
                    switch (whatToBuy) {
                        case 1:
                            data.espresso();
                            break;
                        case 2:
                            data.latte();
                            break;
                        case 3:
                            data.cappuccino();
                            break;
                    }
                    break;
                case "fill":
                    System.out.println("Write how many ml of water do you want to add:");
                    int waterToAdd = scanner.nextInt();
                    data.setWater(waterToAdd);
                    System.out.println("Write how many ml of milk do you want to add:");
                    int milkToAdd = scanner.nextInt();
                    data.setMilk(milkToAdd);
                    System.out.println("Write how many grams of coffee beans do you want to add:");
                    int beansToAdd = scanner.nextInt();
                    data.setBeans(beansToAdd);
                    System.out.println("Write how many disposable cups of coffee do you want to add: ");
                    int cupsToAdd = scanner.nextInt();
                    data.setCups(cupsToAdd);
                    System.out.println("The coffee machine has:");
                    System.out.println(data.getWater() + " of water");
                    System.out.println(data.getMilk() + " of milk");
                    System.out.println(data.getBeans() + " of coffee beans");
                    System.out.println(data.getCups() + " of disposable cups");
                    System.out.println(data.getMoney() + " of money");
                    break;
                case "take":
                    System.out.println("i gave you $" + data.getMoney());
                    data.withdraw();
                    System.out.println();
                    System.out.println("The coffee machine has:");
                    System.out.println(data.getWater() + " of water");
                    System.out.println(data.getMilk() + " of milk");
                    System.out.println(data.getBeans() + " of coffee beans");
                    System.out.println(data.getCups() + " of disposable cups");
                    System.out.println(data.getMoney() + " of money");
                    break;
            }
        }

        public static void cup(int cups, int machineWater, int machineMilk, int machineBeans) {
            int oneWater = 200;
            int oneMilk = 50;
            int oneBean = 15;

            int water = machineWater / oneWater;
            int milk = machineMilk / oneMilk;
            int beans = machineBeans / oneBean;

            int minElementOne = Math.min(water, milk);
            int minElementFinal = Math.min(minElementOne, beans);

            if (minElementFinal == cups) {
                System.out.println("Yes, I can make that amount of coffee");
            }
            else if(minElementFinal > cups) {
                int moreCUps = minElementFinal - cups;
                System.out.println("Yes, I can make that amount of coffee (and even " + moreCUps + " more than that)");
            }
            else {
                System.out.println("No, I can make only " + minElementFinal + " cup(s) of coffee");
            }

        }
    }
  learner_created: true
- name: src/machine/Data.java
  visible: true
  text: |
    package machine;

    public class Data {

        private int water, milk, beans, cups, money;

        public Data() {
            this.water = 400;
            this.milk = 540;
            this.beans = 120;
            this.cups = 9;
            this.money = 550;
        }

        public void espresso() {
            int esWater = 250;
            int esBeans = 16;
            int esCost = 4;

            if((this.water / esWater > 0) &&
                    (this.beans / esBeans > 0) &&
                    (this.money / esCost > 0 ) &&
                    (this.cups != 0)) {
                this.water -= esWater;
                this.beans -= esBeans;
                this.money += esCost;
                this.cups--;
            }
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(getWater() + " of water");
            System.out.println(getMilk() + " of milk");
            System.out.println(getBeans() + " of coffee beans");
            System.out.println(getCups() + " of disposable cups");
            System.out.println(getMoney() + " of money");
        }

        public void latte() {
            int latWater = 350;
            int latBeans = 20;
            int latCost = 7;
            int latMilk = 75;

            if(     (this.water / latWater > 0) &&
                    (this.beans / latBeans > 0) &&
                    (this.money / latCost > 0 ) &&
                    (this.milk / latMilk > 0)   &&
                    (this.cups != 0))  {

                this.water -= latWater;
                this.beans -= latBeans;
                this.money += latCost;
                this.milk -= latMilk;
                this.cups--;
            }
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(getWater() + " of water");
            System.out.println(getMilk() + " of milk");
            System.out.println(getBeans() + " of coffee beans");
            System.out.println(getCups() + " of disposable cups");
            System.out.println(getMoney() + " of money");
        }

        public void cappuccino() {
            int latWater = 200;
            int latBeans = 12;
            int latCost = 6;
            int latMilk = 100;

            if(     (this.water / latWater > 0) &&
                    (this.beans / latBeans > 0) &&
                    (this.money / latCost > 0 ) &&
                    (this.milk / latMilk > 0) &&
                    (this.cups != 0)) {

                this.water -= latWater;
                this.beans -= latBeans;
                this.money += latCost;
                this.milk -= latMilk;
                this.cups--;
            }
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(getWater() + " of water");
            System.out.println(getMilk() + " of milk");
            System.out.println(getBeans() + " of coffee beans");
            System.out.println(getCups() + " of disposable cups");
            System.out.println(getMoney() + " of money");
        }

        public void withdraw() {
            this.money = 0;
        }

        public int getWater() {
            return water;
        }

        public void setWater(int water) {
            this.water += water;
        }

        public int getMilk() {
            return milk;
        }

        public void setMilk(int milk) {
            this.milk += milk;
        }

        public int getBeans() {
            return beans;
        }

        public void setBeans(int beans) {
            this.beans += beans;
        }

        public int getCups() {
            return cups;
        }

        public void setCups(int cups) {
            this.cups += cups;
        }

        public int getMoney() {
            return money;
        }

        public void setMoney(int money) {
            this.money += money;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 4
